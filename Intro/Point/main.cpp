#include <iostream>
using namespace std;
using std::cin;
using std::cout;
using std::endl;
#define tab "\t"
#define delimiter "\n-----------------------------------------------"
//#define CONSTRUCTORS_CHECK
//#define ASSIGNMENT_CHECK
#define CONSTRUCTORS_OVERLOADING

class Point
{
	double x;
	double y;
public:
	double get_x()const
	{
		return x;
	}
	double get_y()const
	{
		return y;
	}
	void set_x(double x)
	{
		this->x = x;
	}
	void set_y(double y)
	{
		this->y = y;
	}
	double Length(double x, double y)
	{
		double l;
		l = sqrt(x * x + y * y);
		return l;
	}

	/////////////////////////////////// Constructors:

	Point() //Конструктор по-умолчанию
	{
		x = y = 0;
		cout << "DefaultConstructor: \t\t" << this << endl;
	}
	Point(double x) //Конструктор с одним параметром
	{
		this->x = x;
		this->y = 0;
		cout << "Single_Argument_Constructor: \t\t" << this << endl;
	}
	Point(double x, double y)
	{
		this->x = x;
		this->y = y;
		cout << "Constructor: \t\t" << this << endl;
	}
	Point(const Point& other) //Поверхностное копирование объекта Shallow copy
	{
		this->x = other.x;
		this->y = other.y;
		cout << "Copy_Constructor: \t\t" << this << endl;
	}
	~Point()
	{
		cout << "Destructor: \t\t" << this << endl;
	}

	////////////////////Operators:
	Point& operator= (const Point& other)
	{
		this->x = other.x;
		this->y = other.y;
		cout << "Copy_Assignment: \t\t" << this << endl;
		return *this;
	}

	void print()const
	{
		cout << "X = " << x << tab << "Y = " << y << endl;

	}

};
	double A_length_B(Point A, Point B);


/*
Создавая структуру или класс мы создаем тип данных.
*/
//#define STRUCT_POINT
int main()
{
	setlocale(LC_ALL, "");
#ifdef STRUCT_POINT


	int a; //Обьявляем переменную "а" типа "int"
	// Создание объекта
	Point A; // Обьявляем переменную "А" типа Point
			 // Обьявляем обьект "А" структуры "Point"
			 // Создаем экземпляр "А" структуры "Point"
	// Обьект класса или структуры называют экземпляром (instance) класса или структуры
	// Instantiate - создать экземпляр или обьект
	A.x = 2;
	A.y = 3;
	cout << A.x << tab << A.y << endl;

	Point* pA = &A;
	cout << pA->x << tab << pA->y << endl;
	cout << (*pA).x << tab << (*pA).y << endl;

#endif // STRUCT_POINT
/*
Обращение к полям обьектов

для обращения к полям обьектов можно использовать .(оператор прямого доступа)
. - Используется для доступа к полям обьекта по имени обьекта
либо ->  - Оператор косвенного доступа ( Arrow operator) 
Используется для доступа по адресу к полям структуры

КОНЦЕПЦИИ ООП

1.ИНКАПСУЛЯЦИЯ
2.НАСЛЕДОВАНИЕ
3.ПОЛИМОРФИЗМ
________________________________________

Инкапсуляция (Encapsulation) - это сокрытие определенной части класса от внешнего мира
Реализуется модификаторами доступа:
private: поля являются закрытыми , доступны только внутри класса и недоступны за пределами класса
в приватной секции обязательно должны быть переменные члены класса, это защищает их от случайной перезаписи
public: открытые поля, доступны из любого места программы. в паблик секции обычно размещают методы
protected: этот модификатор используется только при наследовании. Доступны только внутри нашего класса и его дочернего классов.

!!!!!!ПРИМЕЧАНИЕ!!!!!!

Едиственным отличием между классом и структурой является то, что в классе все поля закрытые, если не указано обратное
а в структуре все поля открыты, если не указано обратное


get/set методы

Если переменные в обьекте закрыты так, что их нельзя использовать, то от них нет никакого смысла
поэтому у каждой переменной в классе должен быть свой get-метод и set-метод
get(получить) - открывают доступ к переменным на чтение
set(задать) -   открывает доступ к переменным на запись
Но кроме того set-методы обеспечивают фильтрацию данных, если она нужна.
Инкапсуляция защищает объекты от случайного изменения и от записи в них некоректных значений.

Метод может быть вызван только для обьекта. Гет методы должны быть константными - метод, который не изменяет обьект для которого он вызывается

This - указатель на обьект для которого вызывается метод. Внутри метода невозможно узнать имя обьекта, для которого метод вызвался.
Но всегда можно узнать адрес обьекта, при помощи this.

в любом классе обязательно должны быть:
Constructor - метод,которй создает обьект
~Destructor - метод, который уничтожает обьект по завершении его времени жизни.
время жизни обьекта истекает при завершении в области видимости в которой он обьявлен, относитс к локальным обьектам
например: 
Operator=

Конструктор и деструктор называются так же как класс но перед деструктором ставится ~ 
Конструктор может принимать параметры. Поэтому его как и любую другую функцию можно перегрузить
В классе может быть сколько угодно конструкторов
Деструктор не может прнимать параметры, его нельзя перегрузить, поэтому в классе может быть только один деструктор
*/
	Point A;
	Point B;
	A.set_x(2);
	A.set_y(3);
	B.set_x(4);
	B.set_y(2);
	cout << "Расстояние до точки А: " << A.Length(A.get_x(), A.get_y()) << endl;
	cout << "Расстояние между точками А и В: " << A_length_B(A, B) << endl;

	for (int i = 0; i < 5; i++) //i-локальный обьект для цикла for
	{
		cout << i << tab;
	}
	cout << endl;
#ifdef CONSTRUCTORS_CHECK
	Point A; //Вызывается default constructor
	A.print();
	Point B = 3;// Конструктор с одним параметром
	B.print();
	Point C(2, 3);
	C.print();
	Point D = C; //Copy Constructor
	D.print();
	Point E; //Default Constructor
	E = C;  //Copy Assignment
	E.print();
#endif CONSTRUCTORS_CHECK

#ifdef ASSIGNMENT_CHECK

	int a, b, c;
	a = b = c = 0;
	cout << a << tab << b << tab << c << endl;

	Point A, B, C;
	cout << "\n----------------------------------------\n";
	A = B = C = Point(4, 5);
	cout << "\n----------------------------------------\n";
	A.print();
	B.print();
	C.print();

#endif ASSIGNMENT_CHECK


	
	return 0;
}

double A_length_B(Point A, Point B)
{
	double Len;
	Len = sqrt((A.get_x() - B.get_x()) * (A.get_x() - B.get_x()) + (A.get_y() - B.get_y()) * (A.get_y() - B.get_y()));
	return Len;
}



#ifdef CONSTRUCTORS_CHECK
	Point A; //Вызывается default constructor
	A.print();
	Point B = 3;// Конструктор с одним параметром
	B.print();
	Point C(2, 3);
	C.print();
	Point D = C; //Copy Constructor
	D.print();
	Point E; //Default Constructor
	E = C;  //Copy Assignment
	E.print();
#endif CONSTRUCTORS_CHECK

#ifdef ASSIGNMENT_CHECK

	int a, b, c;
	a = b = c = 0;
	cout << a << tab << b << tab << c << endl;

	Point A, B, C;
	cout << "\n----------------------------------------\n";
	A = B = C = Point(4, 5);
	cout << "\n----------------------------------------\n";
	A.print();
	B.print();
	C.print();

#endif ASSIGNMENT_CHECK
